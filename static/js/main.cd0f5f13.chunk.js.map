{"version":3,"sources":["context/HexDictionary.tsx","constants/dictionaryPath.ts","components/FileLoader.tsx","components/TextConverter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HexDictionaryContext","React","createContext","HexDictionaryProvider","children","useState","dictionary","setDictionary","useEffect","string","localStorage","getItem","parsedDictionary","Map","JSON","parse","setInLocalStorage","useCallback","map","stringify","Array","from","entries","setItem","Provider","value","FileLoader","useContext","onChange","event","file","target","files","item","reader","FileReader","readAsText","onload","ev","result","json","Object","key","set","onerror","console","error","Typography","variant","Input","type","style","marginBottom","TextConverter","input","setInput","hex","setHex","pnatch","setPnatch","split","reduce","previous","current","index","get","copyToClipboard","copy","TextField","e","disabled","multiline","fullWidth","placeholder","onClick","wordWrap","App","Container","align","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cd0f5f13.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { dictionaryPath } from \"../constants/dictionaryPath\";\n\ntype DictionaryMap = Map<string, string>;\n\ninterface Context {\n\tdictionary: DictionaryMap | undefined;\n\tsetDictionary: (map: DictionaryMap) => void;\n}\n\nexport const HexDictionaryContext = React.createContext<Context>({} as any);\n\nexport const HexDictionaryProvider: React.FC = ({ children }) => {\n\tconst [dictionary, setDictionary] = useState<DictionaryMap>();\n\n\tuseEffect(() => {\n\t\tconst string = localStorage.getItem(dictionaryPath);\n\n\t\tif (!string) return;\n\n\t\tconst parsedDictionary = new Map(JSON.parse(string)) as DictionaryMap;\n\n\t\tsetDictionary(parsedDictionary);\n\t}, []);\n\n\tconst setInLocalStorage = useCallback((map: DictionaryMap) => {\n\t\tconst string = JSON.stringify(Array.from(map.entries()));\n\n\t\tlocalStorage.setItem(dictionaryPath, string);\n\n\t\tsetDictionary(map);\n\t}, []);\n\n\treturn (\n\t\t<HexDictionaryContext.Provider\n\t\t\tvalue={{ dictionary, setDictionary: setInLocalStorage }}\n\t\t>\n\t\t\t{children}\n\t\t</HexDictionaryContext.Provider>\n\t);\n};\n","export const dictionaryPath = \"dictionary\";\n","import Input from \"@material-ui/core/Input\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React, { useCallback, useContext } from \"react\";\nimport { HexDictionaryContext } from \"../context/HexDictionary\";\n\nexport const FileLoader: React.FC = () => {\n\tconst { dictionary, setDictionary } = useContext(HexDictionaryContext);\n\n\tconst onChange = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst file = event.target.files?.item(0);\n\n\t\t\tif (!file) return;\n\n\t\t\tconst reader = new FileReader();\n\n\t\t\treader.readAsText(file, \"utf-8\");\n\n\t\t\treader.onload = ev => {\n\t\t\t\tif (!ev.target?.result) return;\n\n\t\t\t\tconst json = JSON.parse(ev.target.result as string) as {\n\t\t\t\t\t[key: string]: string;\n\t\t\t\t};\n\n\t\t\t\tconst map = new Map<string, string>();\n\n\t\t\t\tfor (const [key, value] of Object.entries(json)) {\n\t\t\t\t\tmap.set(key, value);\n\t\t\t\t}\n\n\t\t\t\tsetDictionary(map);\n\t\t\t};\n\n\t\t\treader.onerror = ev => {\n\t\t\t\tconsole.error(ev);\n\t\t\t};\n\t\t},\n\t\t[setDictionary]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<Typography variant=\"h5\">\n\t\t\t\t{dictionary\n\t\t\t\t\t? \"Replace the Hex Dictionary:\"\n\t\t\t\t\t: \"Upload a Hex Dictionary:\"}\n\t\t\t</Typography>\n\n\t\t\t<Input onChange={onChange} type=\"file\" style={{ marginBottom: 8 * 3 }} />\n\t\t</div>\n\t);\n};\n","import TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport copy from \"copy-to-clipboard\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { HexDictionaryContext } from \"../context/HexDictionary\";\n\nexport const TextConverter: React.FC = () => {\n\tconst { dictionary } = useContext(HexDictionaryContext);\n\n\tconst [input, setInput] = useState(\"\");\n\tconst [hex, setHex] = useState(\"\");\n\tconst [pnatch, setPnatch] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tsetHex(\n\t\t\tinput\n\t\t\t\t.split(\"\")\n\t\t\t\t.reduce(\n\t\t\t\t\t(previous, current, index) =>\n\t\t\t\t\t\tindex === 0\n\t\t\t\t\t\t\t? dictionary?.get(current)!\n\t\t\t\t\t\t\t: previous + \" \" + dictionary?.get(current)!,\n\t\t\t\t\t\"\"\n\t\t\t\t)\n\t\t);\n\t}, [dictionary, input]);\n\n\tuseEffect(() => {\n\t\tsetPnatch(\n\t\t\tinput\n\t\t\t\t.split(\"\")\n\t\t\t\t.reduce(\n\t\t\t\t\t(previous, current, index) =>\n\t\t\t\t\t\tindex === 0\n\t\t\t\t\t\t\t? dictionary?.get(current)!\n\t\t\t\t\t\t\t: dictionary?.get(current)! + previous,\n\t\t\t\t\t\"\"\n\t\t\t\t)\n\t\t);\n\t}, [dictionary, input]);\n\n\tconst copyToClipboard = useCallback((value: string) => {\n\t\tcopy(value);\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t{dictionary && (\n\t\t\t\t<>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={e => setInput(e.target.value)}\n\t\t\t\t\t\tdisabled={!dictionary}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tmultiline\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tplaceholder=\"Enter text here...\"\n\t\t\t\t\t\tstyle={{ marginBottom: 8 * 3 }}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{input && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Typography variant=\"h5\">HEX Codes:</Typography>\n\t\t\t\t\t\t\t<span onClick={() => copyToClipboard(hex)}>\n\t\t\t\t\t\t\t\t<Typography>{hex}</Typography>\n\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t<Typography variant=\"h5\">PNATCH:</Typography>\n\t\t\t\t\t\t\t<span onClick={() => copyToClipboard(pnatch)}>\n\t\t\t\t\t\t\t\t<Typography style={{ wordWrap: \"break-word\" }}>\n\t\t\t\t\t\t\t\t\t{pnatch}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n","import Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { FileLoader } from \"./components/FileLoader\";\nimport { TextConverter } from \"./components/TextConverter\";\n\nfunction App() {\n\treturn (\n\t\t<Container>\n\t\t\t<Typography variant=\"h1\" align=\"center\">\n\t\t\t\tText 2 Hex\n\t\t\t</Typography>\n\t\t\t<Typography align=\"center\">\n\t\t\t\tCreated by <a href=\"https://github.com/afresquet\">afresquet</a>\n\t\t\t</Typography>\n\n\t\t\t<FileLoader />\n\n\t\t\t<TextConverter />\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { HexDictionaryProvider } from \"./context/HexDictionary\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<HexDictionaryProvider>\n\t\t\t<App />\n\t\t</HexDictionaryProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}